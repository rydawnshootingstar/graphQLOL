type Query {
	me: User!
	post: Post!
	posts(query: String): [Post!]!
	users(query: String): [User!]!
	comments(query: String, user: String): [Comment!]!
}

type Mutation {
	createUser(data: CreateUserInput): User!
	updateUser(id: ID!, data: UpdateUserInput): User!
	createPost(data: CreatePostInput): Post!
	updatePost(id: ID!, data: UpdatePostInput): Post!
	createComment(data: CreateCommentInput): Comment!
	updateComment(id: ID!, data: UpdateCommentInput): Comment!
	deleteUser(id: ID!): User!
	deletePost(id: ID!): Post!
	deleteComment(id: ID!): Comment!
}
# comment returns one comment (the one that was changed)
type Subscription {
	count: Int!
	comment(postId: ID!): Comment!
}

input CreateUserInput {
	name: String!
	email: String
	age: Int
}

input UpdateUserInput {
	name: String
	email: String
	age: Int
}

input CreatePostInput {
	title: String!
	body: String!
	published: Boolean!
	author: ID!
}

input UpdatePostInput {
	title: String
	body: String
	published: Boolean
}

input CreateCommentInput {
	text: String!
	author: ID!
	post: ID!
}

input UpdateCommentInput {
	text: String
}

type User {
	id: ID!
	name: String!
	email: String!
	age: Int
	posts: [Post!]!
	comments: [Comment!]!
}

type Post {
	id: ID!
	title: String!
	body: String!
	published: Boolean!
	author: User!
	comments: [Comment!]!
}

type Comment {
	id: ID!
	text: String!
	author: User!
	post: Post!
}
